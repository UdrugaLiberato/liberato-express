generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model answer {
  id          String    @id(map: "idx_16390_primary") @db.VarChar(255)
  location_id String?   @db.VarChar(255)
  answer      Boolean
  created_at  DateTime  @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  question_id String?   @db.VarChar(255)
  question    question? @relation(fields: [question_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dadd4a251e27f6bf")
  location    location? @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_dadd4a2564d218e")

  @@index([question_id], map: "idx_16390_idx_dadd4a251e27f6bf")
  @@index([location_id], map: "idx_16390_idx_dadd4a2564d218e")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model category {
  id             String           @id(map: "idx_16395_primary") @db.VarChar(255)
  name           String           @unique(map: "idx_16395_uniq_64c19c15e237e06") @db.VarChar(255)
  description    String?
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  deleted_at     DateTime?        @db.Timestamptz(6)
  category_image category_image[]
  location       location[]
  question       question[]
}

model category_image {
  category_id String   @db.VarChar(255)
  image_id    Int
  category    category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_2d0e4b1612469de2")
  image       image    @relation(fields: [image_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_2d0e4b163da5256d")

  @@id([category_id, image_id], map: "idx_16400_primary")
  @@index([category_id], map: "idx_16400_idx_2d0e4b1612469de2")
  @@index([image_id], map: "idx_16400_idx_2d0e4b163da5256d")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model city {
  id           String     @id(map: "idx_16403_primary") @db.VarChar(255)  @default(uuid())
  name         String     @unique(map: "idx_16403_uniq_2d5b02345e237e06") @db.VarChar(255)
  latitude     Float
  longitude    Float
  createdAt   DateTime   @db.Timestamptz(6)  @default(now()) @map("created_at")
  updatedAt   DateTime?  @db.Timestamptz(6)  @map("updated_at")
  deletedAt   DateTime?  @db.Timestamptz(6)  @map("deleted_at")
  radiusInKm   Int        @map("radius_in_km")
  location     location[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model emails {
  id           String  @id(map: "idx_16408_primary") @db.VarChar(255)
  message_id   String  @db.VarChar(255)
  subject      String  @db.VarChar(255)
  from_address String  @db.VarChar(255)
  body         String?
  date         String  @db.VarChar(255)
  attachments  String
  from_name    String  @db.VarChar(255)
}

model image {
  id             Int              @id(map: "idx_16414_primary") @default(autoincrement())
  src            String           @db.VarChar(255)
  name           String           @db.VarChar(255)
  mime           String?          @db.VarChar(255)
  category_image category_image[]
  image_location image_location[]
}

model image_location {
  image_id    Int
  location_id String   @db.VarChar(255)
  image       image    @relation(fields: [image_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_d16e07633da5256d")
  location    location @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_d16e076364d218e")

  @@id([image_id, location_id], map: "idx_16420_primary")
  @@index([image_id], map: "idx_16420_idx_d16e07633da5256d")
  @@index([location_id], map: "idx_16420_idx_d16e076364d218e")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model location {
  id             String           @id(map: "idx_16423_primary") @db.VarChar(255)
  category_id    String           @db.VarChar(255)
  user_id        String?          @db.VarChar(255)
  city_id        String           @db.VarChar(255)
  name           String           @db.VarChar(255)
  street         String           @db.VarChar(255)
  phone          String?          @db.VarChar(255)
  email          String?          @db.VarChar(255)
  published      Boolean
  featured       Boolean
  about          String?
  latitude       Float
  longitude      Float
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  deleted_at     DateTime?        @db.Timestamptz(6)
  answer         answer[]
  image_location image_location[]
  category       category         @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_5e9e89cb12469de2")
  city           city             @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_5e9e89cb8bac62af")
  user           user?            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_5e9e89cba76ed395")

  @@index([category_id], map: "idx_16423_idx_5e9e89cb12469de2")
  @@index([city_id], map: "idx_16423_idx_5e9e89cb8bac62af")
  @@index([user_id], map: "idx_16423_idx_5e9e89cba76ed395")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model member {
  id               String   @id(map: "idx_16428_primary") @db.VarChar(255)
  firstname        String   @db.VarChar(255)
  lastname         String?  @db.VarChar(255)
  is_student       Boolean
  dob              DateTime @db.Date
  oib              String   @unique(map: "idx_16428_uniq_70e4fa78ab498595") @db.VarChar(11)
  address          String   @db.VarChar(255)
  city             String   @db.VarChar(255)
  phone            String?  @db.VarChar(255)
  email            String?  @db.VarChar(255)
  disabled_percent String   @db.VarChar(3)
  join_date        DateTime @db.Date
  is_active        Boolean
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model question {
  id          String    @id(map: "idx_16433_primary") @db.VarChar(255)
  category_id String?   @db.VarChar(255)
  question    String    @db.VarChar(255)
  created_at  DateTime  @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  answer      answer[]
  category    category? @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_b6f7494e12469de2")

  @@index([category_id], map: "idx_16433_idx_b6f7494e12469de2")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model task {
  id                             String    @id(map: "idx_16438_primary") @db.VarChar(255)
  assigned_to_id                 String?   @db.VarChar(255)
  name                           String    @db.VarChar(255)
  priority                       String    @db.VarChar(255)
  is_finished                    Boolean
  finished_at                    DateTime? @db.Timestamptz(6)
  note                           String?
  deadline                       DateTime  @db.Timestamptz(6)
  created_at                     DateTime  @db.Timestamptz(6)
  updated_at                     DateTime? @db.Timestamptz(6)
  created_by_id                  String?   @db.VarChar(255)
  user_task_created_by_idTouser  user?     @relation("task_created_by_idTouser", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_527edb25b03a8386")
  user_task_assigned_to_idTouser user?     @relation("task_assigned_to_idTouser", fields: [assigned_to_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_527edb25f4bd7827")

  @@index([created_by_id], map: "idx_16438_idx_527edb25b03a8386")
  @@index([assigned_to_id], map: "idx_16438_idx_527edb25f4bd7827")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user {
  id                             String     @id(map: "idx_16443_primary") @db.VarChar(255)
  email                          String     @unique(map: "idx_16443_uniq_8d93d649e7927c74") @db.VarChar(180)
  phone                          String?    @db.VarChar(180)
  roles                          String
  password                       String     @db.VarChar(255)
  username                       String     @db.VarChar(255)
  avatar                         String
  created_at                     DateTime   @db.Timestamptz(6)
  updated_at                     DateTime?  @db.Timestamptz(6)
  deleted_at                     DateTime?  @db.Timestamptz(6)
  location                       location[]
  task_task_created_by_idTouser  task[]     @relation("task_created_by_idTouser")
  task_task_assigned_to_idTouser task[]     @relation("task_assigned_to_idTouser")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model volunteer {
  id         String    @id(map: "idx_16448_primary") @db.VarChar(255)
  first_name String    @db.VarChar(255)
  last_name  String    @db.VarChar(255)
  city       String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  membership Boolean
  created_at DateTime  @db.Timestamptz(6)
  updated_at DateTime? @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6)
  reason     String
  resume     String
  notes      String?
}
